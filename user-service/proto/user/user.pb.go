// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/user/user.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	proto/user/user.proto

It has these top-level messages:
	User
	Request
	Response
	Token
	Error
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Company  string `protobuf:"bytes,3,opt,name=company" json:"company,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Token    string `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Request struct {
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	User   *User    `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Users  []*User  `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
	Token  *Token   `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Response) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Response) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *Response) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type Token struct {
	Token  string   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Valid  bool     `protobuf:"varint,2,opt,name=valid" json:"valid,omitempty"`
	Errors []*Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Token) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Error struct {
	Code        int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*Request)(nil), "auth.Request")
	proto.RegisterType((*Response)(nil), "auth.Response")
	proto.RegisterType((*Token)(nil), "auth.Token")
	proto.RegisterType((*Error)(nil), "auth.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserServiceClient interface {
	Create(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error)
}

type userServiceClient struct {
	c           client.Client
	serviceName string
}

func NewUserServiceClient(serviceName string, c client.Client) UserServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &userServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userServiceClient) Create(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.GetAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.Auth", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.ValidateToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Create(context.Context, *User, *Response) error
	Get(context.Context, *User, *Response) error
	GetAll(context.Context, *Request, *Response) error
	Auth(context.Context, *User, *Token) error
	ValidateToken(context.Context, *Token, *Token) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserService{hdlr}, opts...))
}

type UserService struct {
	UserServiceHandler
}

func (h *UserService) Create(ctx context.Context, in *User, out *Response) error {
	return h.UserServiceHandler.Create(ctx, in, out)
}

func (h *UserService) Get(ctx context.Context, in *User, out *Response) error {
	return h.UserServiceHandler.Get(ctx, in, out)
}

func (h *UserService) GetAll(ctx context.Context, in *Request, out *Response) error {
	return h.UserServiceHandler.GetAll(ctx, in, out)
}

func (h *UserService) Auth(ctx context.Context, in *User, out *Token) error {
	return h.UserServiceHandler.Auth(ctx, in, out)
}

func (h *UserService) ValidateToken(ctx context.Context, in *Token, out *Token) error {
	return h.UserServiceHandler.ValidateToken(ctx, in, out)
}

func init() { proto.RegisterFile("proto/user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x8b, 0xdb, 0x30,
	0x10, 0x8d, 0x3f, 0x93, 0x8c, 0x49, 0x0e, 0x43, 0x0b, 0x22, 0x87, 0xe2, 0x38, 0x50, 0x5a, 0x0a,
	0x29, 0xa4, 0xe7, 0x1e, 0x42, 0x29, 0xb9, 0xbb, 0x1f, 0xf4, 0xaa, 0xda, 0x03, 0x31, 0x75, 0x2c,
	0x57, 0x92, 0x53, 0xfa, 0x1f, 0x7a, 0xec, 0x5f, 0xdb, 0xff, 0xb3, 0x68, 0x1c, 0xef, 0x7a, 0xc3,
	0xc2, 0xee, 0xc5, 0x9e, 0xf7, 0xe6, 0x49, 0x7a, 0xf3, 0x24, 0x78, 0xd9, 0x6a, 0x65, 0xd5, 0xfb,
	0xce, 0x90, 0xe6, 0xcf, 0x96, 0x31, 0x86, 0xb2, 0xb3, 0xc7, 0xec, 0x9f, 0x07, 0xe1, 0x37, 0x43,
	0x1a, 0x97, 0xe0, 0x57, 0xa5, 0xf0, 0x52, 0xef, 0xcd, 0x3c, 0xf7, 0xab, 0x12, 0x11, 0xc2, 0x46,
	0x9e, 0x48, 0xf8, 0xcc, 0x70, 0x8d, 0x02, 0xa6, 0x85, 0x3a, 0xb5, 0xb2, 0xf9, 0x2b, 0x02, 0xa6,
	0x07, 0x88, 0x2f, 0x20, 0xa2, 0x93, 0xac, 0x6a, 0x11, 0x32, 0xdf, 0x03, 0x5c, 0xc1, 0xac, 0x95,
	0xc6, 0xfc, 0x51, 0xba, 0x14, 0x11, 0x37, 0xee, 0xb0, 0x5b, 0x61, 0xd5, 0x2f, 0x6a, 0x44, 0xdc,
	0xaf, 0x60, 0x90, 0xcd, 0x61, 0x9a, 0xd3, 0xef, 0x8e, 0x8c, 0xcd, 0xfe, 0x7b, 0x30, 0xcb, 0xc9,
	0xb4, 0xaa, 0x31, 0x84, 0xaf, 0x20, 0x74, 0xd6, 0xd9, 0x5f, 0xb2, 0x83, 0xad, 0xf3, 0xbe, 0x75,
	0xbe, 0x73, 0xe6, 0x31, 0x85, 0xc8, 0xfd, 0x8d, 0xf0, 0xd3, 0xe0, 0x4a, 0xd0, 0x37, 0x70, 0x03,
	0x31, 0x69, 0xad, 0xb4, 0x11, 0x01, 0x4b, 0x92, 0x5e, 0xf2, 0xd9, 0x71, 0xf9, 0xa5, 0x85, 0xeb,
	0xc1, 0x54, 0xc8, 0xe7, 0x5c, 0x34, 0x5f, 0x1d, 0x35, 0x38, 0xfc, 0x01, 0x11, 0xe3, 0xfb, 0x01,
	0xbc, 0xd1, 0x00, 0x8e, 0x3d, 0xcb, 0xba, 0x2a, 0x39, 0xb7, 0x59, 0xde, 0x83, 0x67, 0x1d, 0x9e,
	0x7d, 0x84, 0x88, 0x09, 0x17, 0x7d, 0xa1, 0x4a, 0xe2, 0x8d, 0xa3, 0x9c, 0x6b, 0x4c, 0x21, 0x29,
	0xc9, 0x14, 0xba, 0x6a, 0x6d, 0xa5, 0x9a, 0xcb, 0xad, 0x8c, 0xa9, 0xdd, 0x8d, 0x07, 0x89, 0x1b,
	0xf8, 0x0b, 0xe9, 0x73, 0x55, 0x10, 0xbe, 0x86, 0xf8, 0x93, 0x26, 0x69, 0x09, 0x47, 0x69, 0xac,
	0x96, 0x7d, 0x3d, 0x04, 0x9b, 0x4d, 0x70, 0x03, 0xc1, 0x81, 0xec, 0x13, 0xa2, 0xb7, 0x10, 0x1f,
	0xc8, 0xee, 0xeb, 0x1a, 0x17, 0x43, 0x8f, 0x6f, 0xe9, 0x11, 0xe9, 0x1a, 0xc2, 0x7d, 0x67, 0x8f,
	0x0f, 0x36, 0x1c, 0x07, 0x99, 0x4d, 0xf0, 0x1d, 0x2c, 0xbe, 0xbb, 0x5c, 0xa4, 0xa5, 0x3e, 0xcb,
	0x71, 0xff, 0x4a, 0xfc, 0x33, 0xe6, 0xe7, 0xfa, 0xe1, 0x36, 0x00, 0x00, 0xff, 0xff, 0x74, 0x88,
	0x9b, 0x46, 0xc7, 0x02, 0x00, 0x00,
}
